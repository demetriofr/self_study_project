# Generated by Django 5.0.6 on 2024-06-01 03:01

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('company', '0001_initial'),
        ('knowledge_testing', '0001_initial'),
        ('materials', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='имя пользователя')),
                ('password', models.CharField(max_length=128, verbose_name='пароль')),
                ('status_admin', models.BooleanField(default=False, verbose_name='статус администратора')),
                ('status_moderator', models.BooleanField(default=False, verbose_name='статус модератора')),
                ('status_student', models.BooleanField(default=True, verbose_name='статус обучающегося')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='удален')),
                ('is_anonymous', models.BooleanField(default=False, verbose_name='анонимный')),
                ('data_create', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('data_update', models.DateTimeField(auto_now=True, verbose_name='дата обновления')),
                ('additional_programs', models.ManyToManyField(blank=True, related_name='users', to='materials.program', verbose_name='доп. программы')),
                ('additional_tests', models.ManyToManyField(blank=True, related_name='users', to='knowledge_testing.test', verbose_name='доп. тесты')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='создатель')),
                ('data_worker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='company.worker', verbose_name='данные работника')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=120, verbose_name='название группы')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание группы')),
                ('is_status', models.BooleanField(choices=[('A', 'administrator'), ('M', 'moderator'), ('S', 'student')], max_length=1, verbose_name='статус группы')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='удален')),
                ('data_create', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('data_update', models.DateTimeField(auto_now=True, verbose_name='дата обновления')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='создатель')),
                ('programs', models.ManyToManyField(blank=True, to='materials.program', verbose_name='программы')),
                ('users', models.ManyToManyField(blank=True, related_name='users_groups', to=settings.AUTH_USER_MODEL, verbose_name='пользователи')),
            ],
            options={
                'verbose_name': 'группа пользователей',
                'verbose_name_plural': 'группы пользователей',
                'ordering': ['group_name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups_users',
            field=models.ManyToManyField(blank=True, related_name='users_groups', to='users.usergroup', verbose_name='группы пользователей'),
        ),
    ]
